For more info, please visit https://github.com/mc256/starlight

     _             _ _       _     _   
    | |           | (_)     | |   | |  
 ___| |_ __ _ _ __| |_  __ _| |__ | |_ 
/ __| __/ _` | '__| | |/ _` | '_ \| __|
\__ \ || (_| | |  | | | (_| | | | | |_ 
|___/\__\__,_|_|  |_|_|\__, |_| |_|\__|
                        __/ |          
                        |___/   


{{- if .Values.ingress.enabled }}
Get the application URL by running these commands:
  {{- range $host := .Values.ingress.hosts }}
  Starlight Proxy       : http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}
    {{- if $.Values.registry.enabled }}
  Container Registry    : http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host }}/v2
    {{- end }}
  {{- end }}

  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "starlight.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP
  echo $SERVICE_IP

  Please point your domain to $SERVICE_IP in your hosts file or DNS server.

The maximum upload size of the Nginx ingress has set to {{ index .Values.ingress.annotations "nginx.ingress.kubernetes.io/proxy-body-size" }}.
{{- else }}
You have not enabled ingress.
{{- end }}

{{- if .Values.postgres.enabled }}
--------------------------------------------------------------------------------
You have enabled a local PostgresQL database.
In production environment, please consider using an external postgresql with properly configured security and partition.
{{- if .Values.adminer.enabled }}

--------------------------------------------------------------------------------
A light-weight database management tool Adminer has been enabled, to view the database content:

  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "starlight.fullname" . }} 8080:8080
  open it in http://localhost:8080/ and the default login credential is 'postgres'.

{{- end }}
{{- end }}

{{ if .Values.edge.enabled}}
--------------------------------------------------------------------------------
You have enabled edge server.
The purpose of this deployment is to keep the Starlight CLI image on every edge node,
so that whever the user uses initContainer, there is a starlight CLI container for that.

You still need to install the Starlight daemon (containerd snapshotter) and enable it on the edge node.

ON THE WORKER NODE:
1. Install the Starlight daemon

  export ARCH=$(dpkg --print-architecture) # one of amd64, arm64, armhf
  wget https://github.com/mc256/starlight/releases/download/v{{ .Chart.Version }}/starlight_{{ .Chart.Version }}_$ARCH.deb
  sudo dpkg -i starlight_{{ .Chart.Version }}_$ARCH.deb
  sudo systemctl enable starlight
  sudo systemctl start starlight



2. Configure the containerd to use Starlight as the snapshotter

  sudo mkdir -p /etc/containerd
  cat <<EOF | sudo tee /etc/containerd/config.toml
  [plugins]
    [plugins."io.containerd.grpc.v1.cri".containerd]
      snapshotter = "starlight"
  [proxy_plugins]
    [proxy_plugins.starlight]
      type = "snapshot"
      address = "/run/starlight/starlight-snapshotter.sock"
  EOF

  If using k3s, please create `/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl` and add the configuration.
  You will need to change `containerd` socket address to `/run/k3s/containerd/containerd.sock` in `/etc/starlight/proxy.json`.

3. and restart the container 

  sudo systemctl restart containerd starlight

  if using k3s, please restart k3s-agent using `sudo systemctl restart k3s-agent starlight`


4. Add Starlight Proxy to the edge node, test to see if it works
  {{ range $host := .Values.ingress.hosts }}
  ctr-starlight ap in-cluster http{{ if $.Values.ingress.tls }}s{{ end }} {{ $host }}
  {{- end }}
  ctr-starlight test in-cluster

5. Convert Container Images

  ctr-starlight convert \
    --insecure-destination --profile in-cluster --notify \
    --platform=linux/arm/v7,linux/amd64 \
    docker.io/library/redis:6.2.1 \
    starlight-registry.default.svc.cluster.local:5000/starlight/redis:6.2.1

  ctr-starlight convert \
    --insecure-destination --profile in-cluster --notify\
    --platform=linux/arm/v7,linux/amd64 \
    docker.io/library/redis:6.2.2 \
    starlight-registry.default.svc.cluster.local:5000/starlight/redis:6.2.2


--------------------------------------------------------------------------------
{{ end}}

     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "starlight.fullname" . }}'

.