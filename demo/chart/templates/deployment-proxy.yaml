apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "starlight.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "starlight.proxyLabels" . | nindent 4 }}
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    matchLabels:
      {{- include "starlight.proxySelectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "starlight.proxySelectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.enabled}}
      serviceAccountName: {{ include "starlight.serviceAccountName" . }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }} 
      volumes:
        {{- if and (eq .Values.postgres.enabled true) (eq  .Values.postgres.persistence.enabled true) }}
        - name: starlight-pv
          persistentVolumeClaim:
            {{- $newClaimName := include "starlight.fullname" .}}
            claimName: {{ .Values.postgres.persistence.existingClaim | default  $newClaimName }}
        {{- end }}
        - name: dockerconfig
          secret:
            secretName: dockerconfig
            optional: true
      containers:
      ##############################################################
      ##############################################################
        - name: starlight-proxy
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.starlightProxy.repository }}:{{ .Values.starlightProxy.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.starlightProxy.imagePullPolicy }}
          ports:
            - name: starlightproxy
              containerPort: 8090
              protocol: TCP
          livenessProbe:
            periodSeconds: 60
            httpGet:
              path: /
              port: 8090
          readinessProbe:
            httpGet:
              path: /
              port: 8090
          resources:
            {{- toYaml .Values.starlightProxy.resources | nindent 12}}
          #command:  ["/bin/sh", "-ec", "while :; do echo '.'; sleep 60 ; done"]
          command: ["/opt/starlight-proxy"]
          # args: ["--config", "/etc/starlight/proxy_config.json"]
          env:
          - name: STARLIGHT_HOST
            value: "0.0.0.0"
          - name: STARLIGHT_PORT
            value: "8090"
          - name: LOG_LEVEL
            value: {{ .Values.starlightProxy.logLevel | quote | default "info" }}
          - name: DB_CONNECTION_STRING
            value: {{ .Values.starlightProxy.dbConnection | quote | default "postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable" }}
          - name: REGISTRY
            value: {{ .Values.starlightProxy.defaultRegistry | quote | default "http://container-registry.default.svc.cluster.local:5000" }}
          - name: DOCKER_CONFIG
            value: /opt/.docker/config.json
          volumeMounts:
            - mountPath: /opt/.docker/config.json
              name: dockerconfig
              subPath: config.json

        {{- if .Values.postgres.enabled }}
        ############################################################
        - name: starlight-metadata
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "postgres:{{ .Values.postgres.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.postgres.imagePullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            periodSeconds: 60
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          env:
          - name: POSTGRES_PASSWORD
            value: postgres
          {{- if and (eq .Values.postgres.enabled true) (eq  .Values.postgres.persistence.enabled true) }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: starlight-pv
          {{- end}}
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
        {{- end }}
        {{- if and (eq .Values.postgres.enabled true) (eq  .Values.adminer.enabled true) }}
        ############################################################
        - name: adminer
          image: "adminer:{{ .Values.adminer.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.adminer.imagePullPolicy }}
          ports:
            - name: adminer
              containerPort: 8080
              protocol: TCP
          env:
            - name: ADMINER_DEFAULT_SERVER
              value: postgres
            - name: test
              value: {{include  "starlight.fullname-registry" . }}
          securityContext:
            runAsUser: 1000
            allowPrivilegeEscalation: false
          resources:
            {{- toYaml .Values.adminer.resources | nindent 12 }}
        {{- end }}
      ##############################################################
      ##############################################################
      {{- with .Values.cloudNodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.cloudAffinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.cloudTolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
