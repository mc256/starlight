// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// api is the interface between the Starlight client and the CLI tool.
// use `make update-protobuf` to update the generated code.
syntax = "proto3";

option go_package = "github.com/mc256/starlight/client/api";

package api;

// Interface exported by the server.
service Daemon {
  rpc GetVersion(Request) returns (Version) {}
  rpc PingTest(PingRequest) returns (PingResponse) {}
  rpc AddProxyProfile(AuthRequest) returns (AuthResponse) {}
  rpc GetProxyProfiles(Request) returns (GetProxyProfilesResponse) {}
  rpc NotifyProxy(NotifyRequest) returns (NotifyResponse) {}
  rpc PullImage(ImageReference) returns (ImagePullResponse) {}
  rpc SetOptimizer(OptimizeRequest) returns (OptimizeResponse) {}
  rpc ReportTraces(ReportTracesRequest) returns (ReportTracesResponse) {}
}

// GetVersion
message Request{
}

message Version{
  string version = 1;
}

// Ping Test
message PingRequest{
  string proxyConfig = 1;
}

message PingResponse{
  bool success = 1;
  string message = 2;
  int64 latency = 3;
}

// Add Auth
message AuthRequest {
  string profileName = 1;
  string username = 2;
  string password = 3;
  string protocol = 4;
  string address = 5;
}

message AuthResponse {
  bool success = 1;
  string message = 2;
}

message GetProxyProfilesResponse {
  message Profile {
    string name = 1;
    string protocol = 2;
    string address = 3;
  }

  repeated Profile profiles = 1;
}

// Notify Proxy
message NotifyRequest {
  string reference = 1;
  bool insecure = 2;
  string proxyConfig = 3;
}

message NotifyResponse {
  bool success = 1;
  string message = 2;
}


// Pull Image
message ImageReference {
  string reference = 1;
  string base = 2;
  string proxyConfig = 3;
  string namespace = 4;
  bool disableEarlyStart = 5;
}

message ImagePullResponse {
  bool success = 1;
  string message = 2;
  string baseImage = 3;
  int64 totalImageSize = 4;
}

// Optimize
message OptimizeRequest {
  bool enable = 1;
  string group = 2;
}

message OptimizeResponse {
  bool success = 1;
  string message = 2;
  map<string, string> okay = 3;
  map<string, string> failed = 4;
}

// Report Traces
message ReportTracesRequest {
  string proxyConfig = 1;
  bool remove = 2;
}

message ReportTracesResponse {
  bool success = 1;
  string message = 2;
  map<string, string> okay = 3;
  map<string, string> failed = 4;
}